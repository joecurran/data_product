choose(5,5)*(.5)^5
choose(5,4)*(.5)^5 + choose(5,5)*(.5)^5
ppois(10, lambda =5*3)
data(diamond)
library(UsingR)
data(diamond)
y  <- diamond$price; x<-diamond$carat; n<-length(y)
fit <-lm(y~x)
e <-resid(fit)
yhat<- predict(fit)
max(abs(e - (y-yhat)))
max(abs(e - (y- coeft(fit)[1] - coef(fit))))
max(abs(e - (y- coeft(fit)[1] - coef(fit)[2]*x )))
max(abs(e - (y- coet(fit)[1] - coef(fit)[2]*x )))
max(abs(e - (y- coef(fit)[1] - coef(fit)[2]*x )))
ggplot(diamond$carat,diamond$price)
plot(diamond$carat,diamond$price,xlab="mass",ylab='price',bg="lightblue")
plot(diamond$carat,diamond$price,xlab="mass",
ylab='price',bg="lightblue", cex=1.1, pch=21, frame=FALSE)
for (i in 1:n)
abline(fit,lwd=2)
for (i in 1:n)
lines(c(x[i],x[i]), c(y[i], yhat[i]), col='red',lwd=2)
lines(c(x[i],x[i]), c(e[i],0), col='red',lwd=2)
lines(c(x[i],x[i]), c(e[i],0), col='red',lwd=2)
plot(x,e,xlab="mass",
ylab='res',bg="lightblue", cex=2, pch=21, frame=FALSE)
abline(h=0,lwd=2)
for (i in 1:n)
lines(c(x[i],x[i]), c(e[i],0), col='red',lwd=2)
x= runif(100,-3,3); y=x+sin(x)+rnorm(100,sd=.2);
library(ggplot2)
g=ggplot(data.frame(x=x, y=y), aes(x=x,y=y))
g=g+geom_smooth(method='lm',colour='black')
g=g+geom_point(size=7,colour='black',alpha=.4)
g=g+geom_point(size=5,colour='red',alpha=.4)
g
g = ggplot(data.frame(x=x,y= resid(lm(y~x)), aes(x=x,y=y) )
g = ggplot(data.frame(x=x,y= resid(lm(y~x)), aes(x=x,y=y) )
g = ggplot(data.frame(x=x,y= resid(lm(y~x))), aes(x=x,y=y) )
g=g+geom_hline(yintercept=0, size=2)
g=g+ geom_point(size=5, colour="red", alpha=.4)
g=g+ xlab('X')+ylab("Residuals")
g
g=g+ geom_point(size=7, colour="black", alpha=.4)
g
g=g+ geom_point(size=5, colour="red", alpha=.4)
g
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
quiz_fit <- lm(y~x)
resid(quiz_fit)
sd(resid(quiz_fit))
?sd
quiz_fit
g = ggplot(data.frame(x=x,y=y), aes(x=x,y=y))
g =g+geom_point(size=5,colour='red', alpha=.4)
g
?aes
data.frame(x=x,y=y)
g =g+geom_line(size=5,colour='red', alpha=.4)
g
g =g-geom_line(size=5,colour='red', alpha=.4)
g = ggplot(data.frame(x=x,y=y), aes(x=x,y=y))
g =g+geom_point(size=5,colour='red', alpha=.4)
g =g+geom_line(data = quiz_fit)
g
?knitr2pdf
library(knitr)
?knitr2pdf
??knitr2pdf
?knit2pdf
knit2pdf(input = "stat//toothgrowth.Rmd", output = "stat/toothgrowth.pdf")
knit2pdf(input = "stat//toothgrowth.Rmd", output = "stat/toothgrowth.pdf")
mn<--2
n=9
ls()
n
mn
mn+c(-1,1)*qt(.95,n-1)*s/sqrt(n)
s=0.3
mn+c(-1,1)*qt(.95,n-1)*s/sqrt(n)
s=1.5
mn+c(-1,1)*qt(.95,n-1)*s/sqrt(n)
s=2.6
mn+c(-1,1)*qt(.95,n-1)*s/sqrt(n)
s=2.1
mn+c(-1,1)*qt(.95,n-1)*s/sqrt(n)
mn+c(-1,1)*qt(.975,n-1)*s/sqrt(n)
s
s=c(0.3,1.5,2.1,2.6)
mn+c(-1,1)*qt(.975,n-1)*s/sqrt(n)
s
s<-0.3
mn+c(-1,1)*qt(.975,n-1)*s/sqrt(n)
s<-1.5
mn+c(-1,1)*qt(.975,n-1)*s/sqrt(n)
s<-2.1
mn+c(-1,1)*qt(.975,n-1)*s/sqrt(n)
s<-2.6
mn+c(-1,1)*qt(.975,n-1)*s/sqrt(n)
n
qt(.95,n-1)
qt(.95,n-1,lower.tail = FALSE)
mn+c(-1,1)*qt(.975,n-1,lower.tail = FALSE)*s/sqrt(n)
s
s=0.3
mn+c(-1,1)*qt(.975,n-1,lower.tail = FALSE)*s/sqrt(n)
s=1.5
mn+c(-1,1)*qt(.975,n-1,lower.tail = FALSE)*s/sqrt(n)
s=2.1
mn+c(-1,1)*qt(.975,n-1,lower.tail = FALSE)*s/sqrt(n)
s=2.6
mn+c(-1,1)*qt(.975,n-1,lower.tail = FALSE)*s/sqrt(n)
n1<-10
n2<-10
var_n1<-.6
var_n2<-.68
df <- (var_n1/n1 + var_n2/n2)^2
df
df <- ((var_n1/n1 + var_n2/n2)^2 )/( (var_n1/n1)^2/(n1-1) + (var_n2/n2)^2/(n2-1))
df
qt(.975,df)
qt(.95,df)
qt(.975,df)*((var_n1/n1) + (var_n2/n2) )^.5
-2 + c(-1,1)*qt(.975,df)*((var_n1/n1) + (var_n2/n2) )^.5
-2 + c(-1,1)*qt(.95,df)*((var_n1/n1) + (var_n2/n2) )^.5
-2 + c(-1,1)*qt(.90,df)*((var_n1/n1) + (var_n2/n2) )^.5
-2.620529 - -1.379471
-2.476046 - -1.523954
-4 + c(-1,1)*qt(.95,df)*((var_n1/n1) + (var_n2/n2) )^.5
n1
n2
n1<-9
n2<-9
var_n1<-1.5^2
var_n2<-1.8^2
df <- ((var_n1/n1 + var_n2/n2)^2 )/( (var_n1/n1)^2/(n1-1) + (var_n2/n2)^2/(n2-1))
-4 + c(-1,1)*qt(.95,df)*((var_n1/n1) + (var_n2/n2) )^.5
-4 + c(-1,1)*qt(.975,df)*((var_n1/n1) + (var_n2/n2) )^.5
-4 + c(-1,1)*qt(.95,df)*((var_n1/n1) + (var_n2/n2) )^.5
df
-4 + c(-1,1)*qt(.95,15)*((var_n1/n1) + (var_n2/n2) )^.5
-4 + c(-1,1)*qt(.95,16)*((var_n1/n1) + (var_n2/n2) )^.5
n1
library(manipulate)
library(UsingR)
myHist <- funtion(mu){
myHist <- funtion(mu) {
myHist <- funtion(mu) {\
myHist <- funtion(mu) {
myHist <- funtion(mu)
myHist <- function(mu) {
mse <- mean((galton$child - mu)^2)
g <- ggplot(galton, aes(x=child))+geom_histogram(fill="salmon", colour= "black", binwidth=1)
g <- g+geom_vline(xintercept = mu, size=3)
g <- g+ggtitle(paste("mu = ", mu, ", MSE = ", round(mse, 2), sep = ""))
g
}
manipulate(myHist(mu), mu=slider(62,74, step = 0.5))
ggplot()
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
lse <- w*(x - mu)^2
mu  <- c(0.1471, 0.0025, 1.077, 0.300)
lse <- w*(x - mu)^2
lse
min(lse)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
qplot(x,y)
ggplot(x,y)
ggplot( c(x,y), aes(x=x) )
data(mtcars)
names(mtcars)
(mtcars)
lm(mtcars$mpg~mtcars$wt)
0.4*1.5
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
xc <- x - mean(x)
mean(x)
xc
sd(x)
xn <- xc/sd(x)
xn
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
t <- range(10)
t
t <- range(10,10)
t
t<-0
help(range)
t <- range(1:10)
t
t <- range(10)
t
t <- xrange(10)
seq(10)
t <- seq(10)
t
t <- seq(from = 0,to = 1, by = 0.2)
t
x
y_t <- sum((x-t)^2)
x-t
x
mean(x)
lm(mtcars$mpg~mtcars$wt)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y~x -1)
install.packages(swirl)
install.packages("swirl")
library(swirl)
install.packages("swirl")
install.packages("swirl")
install.packages("swirl")
install.packages("swirl", dependencies = TRUE)
install.packages(testthat)
install.packages("testthat")
install.packages("swirl", dependencies = NA)
install.packages("testthat")
install.packages("swirl")
library(swirl)
swirl()
0
library(UsingR)
data(diamond)
library(ggplot2)
g = ggplot(diamond, aes(x = carat, y = price))
g= g+ xlab("Mass (carats)")
g=g+ylab("Price (SIN$)")
g = g+geom_point(size=6, colour="black", alpha=0.2)
g = g+geom_point(size=5, colour="blue", alpha=0.2)
g=g+geom_smooth(method="lm", colour="black")
g
fit <-lm(price ~ carat, data= diamond)
coef(fit)
summary(fit)
fit2 <-lm(price ~ I(carat - mean(carat)), data = diamond)
help(I)
coef(fit2)
fit3 <-lm(price ~ I(carat*10), data = diamond)
coef(fit3)
predict(fit, newdata = data.frame(carat = newx))
newx <- c(0.16, 0.27, 0.34)
predict(fit, newdata = data.frame(carat = newx))
g = g+geom_point(size=3, colour="red", alpha=0.2)
g
g = g-geom_point(size=3, colour="red", alpha=0.2)
g = ggplot(diamond, aes(x = carat, y = price))
g= g+ xlab("Mass (carats)")
g=g+ylab("Price (SIN$)")
g = g+geom_point(size=6, colour="black", alpha=0.2)
g = g+geom_point(size=5, colour="blue", alpha=0.2)
g=g+geom_smooth(method="lm", colour="black")
g
data(diamond)
y <- diamond$price; x<-diamond$carat; n<-length(y)
fit<- lm(y~x)
e<-resid(fit)
yhat<-predict(fit)
plot(diamond$carat, diamond$price,
xlab="Mass (carats)".
plot(diamond$carat, diamond$price,
plot(diamond$carat, diamond$price,
xlab="mass carat"
. ylab="price sin".
plot(diamond$carat, diamond$price,
xlab="mass carat",
ylab="price",
bg="lightblue",
col="black", cex=1.1, pch=21, frame=FALSE)
abline(fit, lwd=2)
for (i in 1:n)
line(c(x[i], x[i]), c(y[i], yhat[i]), col ="red", lwd=2 )
lines(c(x[i], x[i]), c(y[i], yhat[i]), col ="red", lwd=2 )
for (i in 1:n)
lines(c(x[i], x[i]), c(y[i], yhat[i]), col ="red", lwd=2 )
x = runif(100, 3, -3);
x
x = runif(100, -3, 3);
x
y = x + sin(x) + rnorm(100,sd =.2)
library(ggplot2)
g=ggplot(data.frame(x=x, y=y), aes(x=x, y=y))
g=g+geom_smooth(method="lm",colour="black")
g=g+geom_point(size=7,colour="black", alpha=.4)
g=g+geom_point(size=5,colour="red", alpha=.4)
g
g=ggplot(data.frame(x=x, y=resid(lm(y~x) ) ), aes(x=x, y=y))
g=g+geom_hline(yintercept=0,size=2)
g=g+geom_point(size=7,colour="black", alpha=.4)
g=g+geom_point(size=5,colour="red", alpha=.4)
g=g+xlab("X")+ylab("Residual")
g
y<-diamond$price; x<-diamond$carat; n<-length(y)
fit= lm(y~x)
summary(fit)$sigma
summary(fir)
summary(fit)
length(x)
sqrt(sum(resid(fit)^2)/(n-2))
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
summary(lm(y~x))
data(mtcars)
lm(mpg~wt)
mtcars
lm(mtcars$mpg~mtcars$wt)
summary(lm(mtcars$mpg~mtcars$wt))
help(mtcars)
mtcars
fit<-lm(mtcars$mpg~mtcars$wt)
fit
summary(fit)
summary(fit)$coefficients
sumCoeff<-summary(fit)$coefficients
sumCoeff[2,1]+c(-1,1)*qt(.975, df=fit$df) *sumCoeff[2,2]
sumCoeff[1,1]+c(-1,1)*qt(.975, df=fit$df) *sumCoeff[1,2]
37.285126 +  mean(mtcars)*(sumCoeff[2,1]+c(-1,1)*qt(.975, df=fit$df) *sumCoeff[2,2] )
37.285126 +  mean(mtcars$wt)*(sumCoeff[2,1]+c(-1,1)*qt(.975, df=fit$df) *sumCoeff[2,2] )
newx = data.frame(x = seq(min(x), max(x), length = 100))
newx
adsf
predict(fit, mtcars$wt, interval("confidence"))
predict(fit, mtcars$wt, interval=("confidence"))
predict(fit, mtcars$wt, interval="confidence")
d
predict(fit, mtcars$wt)
mtcars$wt
predict(fit)
coef(fit)[1] - coef(fit)[2]*mean(mtcars$wt)
require(datasets)
data(swiss)
?swiss
require(GGally); require(ggplot2)
installed.packages("GGally")
install.packages("GGally")
g = ggpairs(swiss, lower = list(continuous="smooth"), params = c(method="loess"))
require(GGally); require(ggplot2)
g = ggpairs(swiss, lower = list(continuous="smooth"), params = c(method="loess"))
g
clear
cls
mtacts
mtcars
?mtcats
?mtcars
sessionInfo()
clear
install.packages("shiny")
install.packages("shinyapps")
install.packages("devtools")
sessionInfo
sessionInfo()
devtools::install_github('rstudio/shinyapps')
library(devtools)
library(devtools)
devtools
installed.packages('devtools')
install.packages('devtools')
install.packages('devtools')
devtools::install_github('rstudio/shinyapps')
install.packages('rCharts')
install.packages("~/Downloads/rCharts-master.tar.gz", repos=NULL, rype="source")
install.packages("RCurl")
deps = c( 'RJSONIO', 'whisker', 'yaml')`
for (dep in deps){
install.packages(dep)
}
deps = c( 'RJSONIO', 'whisker', 'yaml')`
for (dep in deps){
install.packages(dep)
}
deps = c( 'RJSONIO', 'whisker', 'yaml')
for (dep in deps){
install.packages(dep)
}
library(caret)
install.packages("caret")
install.packages("kernla")
install.packages("kernlab")
library(caret); library(kernlab); data(spam)
inTrain <- createDataPartition(y=spam$type, p=0.75, list=FALSE)
inTrain
str(dim)
str(inTrain)
names(inTrain)
inTrain
head(inTrain)
training <- spam[inTrain]
testing <- spam[-inTrain]
modelFit <- train(type~., data=training, method="glm")
training <- spam[inTrain,]
testing <- spam[-inTrain,]
training
str(training)
str(testing)
testing[1]
testing[1,]
modelFit <- train(type~., data=training, method="glm")
install.packages("e1071")
install.packages("rCharts")
library(rCharts)
env
env()
modelFit <- train(type~., data=training, method="glm")
warnings()
args(train.default)
set.seed(1235)
modelFit2 <- train(type~., data=training, method="glm")
modelFit2
set.seed(1235)
modelFit3 <- train(type~., data=training, method="glm")
install.packages("ISLR")
library(ILSR)
library(ISLR); library(ggplot2); library(caret)
data(Wage)
summary(Wage)
inTrain <- createDataPartition(y=Wage$wage, p=0.7, list=FALSE)
training <- Wage[inTrain, ]
testing <- Wage[-inTrain, ]
dim(training); dim(testing)
trainging[1][1]+ testsing[1][1]
training[1][1]+ testsing[1][1]
training[1][1]+ testing[1][1]
training[1][1]
dim(training); dim(testing)
head(training[1][1])
dim(training); dim(testing)
featurePlot(x=training[,c("age","education","jobclass")], )
featurePlot(x=training[,c("age","education","jobclass")], )
featurePlot(x=training[,c("age","education","jobclass")],
y=training$wage,
plot="pairs")
qplot(age,wage,colour=jobclass, data=training)
qq <- qplot(age,wage,colour=education, data=training)
qq+ geom_smooth(method="lm", formula=y~x)
summary(Wage)
?Wage
library(Hmisc)
install.packages(Hmisc)
install.packages("Hmisc")
cutWage <- cut2(training$wage, g=3)
library(Hmisc)
cutWage <- cut2(training$wage, g=3)
table(cutWage)
qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot", "jitter"))
grid.arrange(p1,p2,ncol=2)
p1<-qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot"))
p1
dim(cutWage)
cutWage
head(cutWage)
p2<-qplot(cutWage, age, data=training, fill=cutWage, geom=c("boxplot", "jitter"))
grid.arrange(p1,p2,ncol=2)
table(cutWage, training$jobclass)
t1<-table(cutWage, training$jobclass)
prop.table(t1,1)
qplot(wage, colour, education, data=training, geom="density")
qplot(wage, colour=education, data=training, geom="density")
setwd("~/src/shinyapp_centering")
runApp()
library(shiny)
runApp()
runApp()
runApp()
data(mtcars)
qplot(wt,mpg, data=mtcars )
library(qqplot2)
library(ggplot2)
qplot(wt,mpg, data=mtcars )
qplot(wt,mpg)
qplot(wt,mpg, data=mtcars )
p = qplot(wt,mpg, data=mtcars )
p=p+geom_smooth(mehtod="lm")
p
runApp()
fit = lm(mpg~wt, data = mtcars)
predict(fit, newdata=2.5)
predict(fit, newdata=data.frame(wt=2.5) )
fit
summary(fit)
runApp()
runApp()
p=qplot(wt, mpg, data= mtcars)
p=p+geom_smooth(mehtod="lm")
p=p+geom_vline(xintercept=c(input$wt))
p=qplot(wt, mpg, data= mtcars)
p=p+geom_smooth(mehtod="lm")
p=p+geom_vline(xintercept=input$wt)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
